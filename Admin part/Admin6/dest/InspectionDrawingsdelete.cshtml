@functions {

	//
	// Page class for InspectionDrawings
	//
	public class cInspectionDrawings_delete<C, S> : cInspectionDrawings_delete_base<C, S>
		where C : cConnection, new()
		where S : cAdvancedSecurity, new()
	{

		// TblAddReturnPage
		public string Get_TblAddReturnPage() {
			return ReturnUrl;		
		}

		// TblEditReturnPage
		public string Get_TblEditReturnPage() {
			return ReturnUrl;		
		}

		// Row Inserting event
		public override bool Row_Inserting(OrderedDictionary rsold, ref OrderedDictionary rsnew) {

			// Enter your code here
			// To cancel, set return value to False and error message to CancelMessage

			rsnew["DateCreated"]=DateTime.Now;
			rsnew["Size"]=1024;
			return true;
		}
	}

	// InspectionDrawings_delete	
	public static cInspectionDrawings_delete<cConnection, cAdvancedSecurity> InspectionDrawings_delete {
		get { return (cInspectionDrawings_delete<cConnection, cAdvancedSecurity>)ew_PageData["InspectionDrawings_delete"]; }
		set { ew_PageData["InspectionDrawings_delete"] = value; }
	}

	// CurrentPage
	public static cInspectionDrawings_delete<cConnection, cAdvancedSecurity> CurrentPage {
		get { return (cInspectionDrawings_delete<cConnection, cAdvancedSecurity>)ew_PageData["CurrentPage"]; }
		set { ew_PageData["CurrentPage"] = value; }
	}

	// CurrentTable
	public static cInspectionDrawings_delete<cConnection, cAdvancedSecurity> CurrentTable {
		get { return CurrentPage; }
		set { CurrentPage = value; }
	}
}
@{
	EW_ROOT_RELATIVE_PATH = "..";
	EW_RELATIVE_PATH = "";
	Layout = EW_RELATIVE_PATH + "_layout.cshtml";

	// Header
	ew_Header(false);

	// Create page object
	if (InspectionDrawings_delete == null) {
		InspectionDrawings_delete = new cInspectionDrawings_delete<cConnection, cAdvancedSecurity>();
	}

	// Page init
	InspectionDrawings_delete.Page_Init();

	// Page main
	InspectionDrawings_delete.Page_Main();

	// Global Page Rendering event
	Page_Rendering();

	// Page Rendering event
	InspectionDrawings_delete.Page_Render();
}
<script type="text/javascript">

// Page object
var InspectionDrawings_delete = new ew_Page("InspectionDrawings_delete");
InspectionDrawings_delete.PageID = "delete"; // Page ID
var EW_PAGE_ID = InspectionDrawings_delete.PageID; // For backward compatibility

// Form object
var fInspectionDrawingsdelete = new ew_Form("fInspectionDrawingsdelete");

// Form_CustomValidate event
fInspectionDrawingsdelete.Form_CustomValidate = 
 function(fobj) { // DO NOT CHANGE THIS LINE!

 	// Your custom validation code here, return false if invalid. 
 	return true;
 }

// Use JavaScript validation or not
fInspectionDrawingsdelete.ValidateRequired = @((EW_CLIENT_VALIDATE) ? "true" : "false");

// Dynamic selection lists
fInspectionDrawingsdelete.Lists["x_InspectionDrawingDataId"] = {"LinkField":"x_Id","Ajax":null,"AutoFill":false,"DisplayFields":["x_Id","","",""],"ParentFields":[],"FilterFields":[],"Options":[]};
fInspectionDrawingsdelete.Lists["x_CreatedBy_Id"] = {"LinkField":"x_Id","Ajax":true,"AutoFill":false,"DisplayFields":["x_FirstName","x_LastName","",""],"ParentFields":[],"FilterFields":[],"Options":[]};

// Form object for search
</script>
<script type="text/javascript">

// Write your client script here, no need to add script tags.
</script>
@{

	// Load records for display
	InspectionDrawings_delete.Recordset = InspectionDrawings_delete.LoadRecordset();
	if (InspectionDrawings_delete.TotalRecs <= 0) { // No record found, exit
		if (InspectionDrawings_delete.Recordset != null) {
			InspectionDrawings_delete.Recordset.Close();
			InspectionDrawings_delete.Recordset.Dispose();
		}
		InspectionDrawings_delete.Page_Terminate("InspectionDrawingslist.cshtml"); // Return to list
	}
}
<div class="ewToolbar">
@if (ew_Empty(InspectionDrawings.Export)) {<div style="display: inline-block">
@{
	if (Breadcrumb != null) {
		Breadcrumb.Render();
	}
}
</div>}
@if (ew_Empty(InspectionDrawings.Export)) {
@Html.Raw(Language.SelectionForm())
}
	<div class="clearfix"></div>
</div>
@{
	InspectionDrawings_delete.ShowPageHeader();
}
@{
	InspectionDrawings_delete.ShowMessage();
}
<form name="fInspectionDrawingsdelete" id="fInspectionDrawingsdelete" class="form-inline ewForm ewDeleteForm" action="@ew_CurrentPage()" method="post">
<br>
@if (InspectionDrawings_delete.CheckToken) { 
<input type="hidden" name="@EW_TOKEN_NAME" value="@InspectionDrawings_delete.Token">
}
<input type="hidden" name="t" value="InspectionDrawings">
<input type="hidden" name="a_delete" id="a_delete" value="D">
@foreach (object key in InspectionDrawings_delete.RecKeys) {
	var keyvalue = Information.IsArray(key) ? String.Join(EW_COMPOSITE_KEY_SEPARATOR, (string[])key) : Convert.ToString(key);
<input type="hidden" name="key_m" value="@keyvalue">
}
<div class="ewGrid">
<div class="@((ew_IsResponsiveLayout()) ? "table-responsive" : "ewGridMiddlePanel")">
<table class="table ewTable">
@InspectionDrawings.TableCustomInnerHtml
	<thead>
	<tr class="ewTableHeader">
@if (InspectionDrawings.Id.Visible) { // Id (begin)
		<th><span id="elh_InspectionDrawings_Id" class="InspectionDrawings_Id">@Html.Raw(InspectionDrawings.Id.FldCaption)</span></th>
} @* Id.Visible (end) *@
@if (InspectionDrawings.DateCreated.Visible) { // DateCreated (begin)
		<th><span id="elh_InspectionDrawings_DateCreated" class="InspectionDrawings_DateCreated">@Html.Raw(InspectionDrawings.DateCreated.FldCaption)</span></th>
} @* DateCreated.Visible (end) *@
@if (InspectionDrawings.InspectionDrawingDataId.Visible) { // InspectionDrawingDataId (begin)
		<th><span id="elh_InspectionDrawings_InspectionDrawingDataId" class="InspectionDrawings_InspectionDrawingDataId">@Html.Raw(InspectionDrawings.InspectionDrawingDataId.FldCaption)</span></th>
} @* InspectionDrawingDataId.Visible (end) *@
@if (InspectionDrawings.CreatedBy_Id.Visible) { // CreatedBy_Id (begin)
		<th><span id="elh_InspectionDrawings_CreatedBy_Id" class="InspectionDrawings_CreatedBy_Id">@Html.Raw(InspectionDrawings.CreatedBy_Id.FldCaption)</span></th>
} @* CreatedBy_Id.Visible (end) *@
	</tr>
	</thead>
	<tbody>
@{
InspectionDrawings_delete.RecCnt = 0;
}
@while (InspectionDrawings_delete.Recordset.Read()) {
	InspectionDrawings_delete.RecCnt++;
	InspectionDrawings_delete.RowCnt++;

	// Set row properties
	InspectionDrawings.ResetAttrs();
	InspectionDrawings.RowType = EW_ROWTYPE_VIEW; // View

	// Get the field contents
	InspectionDrawings_delete.LoadRowValues(InspectionDrawings_delete.Recordset);

	// Render row
	InspectionDrawings_delete.RenderRow();
	<tr @(Html.Raw(InspectionDrawings.RowAttributes))>
@if (InspectionDrawings.Id.Visible) { // Id (begin)
		<td @(Html.Raw(InspectionDrawings.Id.CellAttributes))>
<span id="el@(InspectionDrawings_delete.RowCnt)_InspectionDrawings_Id" class="form-group InspectionDrawings_Id">
<span @(Html.Raw(InspectionDrawings.Id.ViewAttributes))>
@Html.Raw(InspectionDrawings.Id.ListViewValue)</span>
</span>
</td>
} @* Id.Visible (end) *@
@if (InspectionDrawings.DateCreated.Visible) { // DateCreated (begin)
		<td @(Html.Raw(InspectionDrawings.DateCreated.CellAttributes))>
<span id="el@(InspectionDrawings_delete.RowCnt)_InspectionDrawings_DateCreated" class="form-group InspectionDrawings_DateCreated">
<span @(Html.Raw(InspectionDrawings.DateCreated.ViewAttributes))>
@Html.Raw(InspectionDrawings.DateCreated.ListViewValue)</span>
</span>
</td>
} @* DateCreated.Visible (end) *@
@if (InspectionDrawings.InspectionDrawingDataId.Visible) { // InspectionDrawingDataId (begin)
		<td @(Html.Raw(InspectionDrawings.InspectionDrawingDataId.CellAttributes))>
<span id="el@(InspectionDrawings_delete.RowCnt)_InspectionDrawings_InspectionDrawingDataId" class="form-group InspectionDrawings_InspectionDrawingDataId">
<span @(Html.Raw(InspectionDrawings.InspectionDrawingDataId.ViewAttributes))>
@Html.Raw(InspectionDrawings.InspectionDrawingDataId.ListViewValue)</span>
</span>
</td>
} @* InspectionDrawingDataId.Visible (end) *@
@if (InspectionDrawings.CreatedBy_Id.Visible) { // CreatedBy_Id (begin)
		<td @(Html.Raw(InspectionDrawings.CreatedBy_Id.CellAttributes))>
<span id="el@(InspectionDrawings_delete.RowCnt)_InspectionDrawings_CreatedBy_Id" class="form-group InspectionDrawings_CreatedBy_Id">
<span @(Html.Raw(InspectionDrawings.CreatedBy_Id.ViewAttributes))>
@Html.Raw(InspectionDrawings.CreatedBy_Id.ListViewValue)</span>
</span>
</td>
} @* CreatedBy_Id.Visible (end) *@
	</tr>
}
@{
	InspectionDrawings_delete.Recordset.Close();
	InspectionDrawings_delete.Recordset.Dispose();
}
</tbody>
</table>
</div>
</div>
<div class="btn-group ewButtonGroup">
<button class="btn btn-primary ewButton" name="btnAction" id="btnAction" type="submit">@Html.Raw(Language.Phrase("DeleteBtn"))</button>
</div>
</form>
<script type="text/javascript">
fInspectionDrawingsdelete.Init();
</script>
@{
	InspectionDrawings_delete.ShowPageFooter();
	if (EW_DEBUG_ENABLED) {
		ew_Write(ew_DebugMsg());		
		ew_Write(ew_ElapsedTime(StartTime));		
	}
}
<script type="text/javascript">

// Write your table-specific startup script here
// document.write("page loaded");

</script>
@{
	InspectionDrawings_delete.Page_Terminate();
}
