@functions {

	//
	// Page class for InspectionDrawings
	//
	public class cInspectionDrawings_view<C, S> : cInspectionDrawings_view_base<C, S>
		where C : cConnection, new()
		where S : cAdvancedSecurity, new()
	{

		// TblAddReturnPage
		public string Get_TblAddReturnPage() {
			return ReturnUrl;		
		}

		// TblEditReturnPage
		public string Get_TblEditReturnPage() {
			return ReturnUrl;		
		}
	}

	// InspectionDrawings_view	
	public static cInspectionDrawings_view<cConnection, cAdvancedSecurity> InspectionDrawings_view {
		get { return (cInspectionDrawings_view<cConnection, cAdvancedSecurity>)ew_PageData["InspectionDrawings_view"]; }
		set { ew_PageData["InspectionDrawings_view"] = value; }
	}

	// CurrentPage
	public static cInspectionDrawings_view<cConnection, cAdvancedSecurity> CurrentPage {
		get { return (cInspectionDrawings_view<cConnection, cAdvancedSecurity>)ew_PageData["CurrentPage"]; }
		set { ew_PageData["CurrentPage"] = value; }
	}

	// CurrentTable
	public static cInspectionDrawings_view<cConnection, cAdvancedSecurity> CurrentTable {
		get { return CurrentPage; }
		set { CurrentPage = value; }
	}
}
@{
	EW_ROOT_RELATIVE_PATH = "..";
	EW_RELATIVE_PATH = "";
	Layout = EW_RELATIVE_PATH + "_layout.cshtml";

	// Header
	ew_Header(false);

	// Create page object
	if (InspectionDrawings_view == null) {
		InspectionDrawings_view = new cInspectionDrawings_view<cConnection, cAdvancedSecurity>();
	}

	// Page init
	InspectionDrawings_view.Page_Init();

	// Page main
	InspectionDrawings_view.Page_Main();

	// Global Page Rendering event
	Page_Rendering();

	// Page Rendering event
	InspectionDrawings_view.Page_Render();
}
@if (ew_Empty(InspectionDrawings.Export)) {
<script type="text/javascript">

// Page object
var InspectionDrawings_view = new ew_Page("InspectionDrawings_view");
InspectionDrawings_view.PageID = "view"; // Page ID
var EW_PAGE_ID = InspectionDrawings_view.PageID; // For backward compatibility

// Form object
var fInspectionDrawingsview = new ew_Form("fInspectionDrawingsview");

// Form_CustomValidate event
fInspectionDrawingsview.Form_CustomValidate = 
 function(fobj) { // DO NOT CHANGE THIS LINE!

 	// Your custom validation code here, return false if invalid. 
 	return true;
 }

// Use JavaScript validation or not
fInspectionDrawingsview.ValidateRequired = @((EW_CLIENT_VALIDATE) ? "true" : "false");

// Dynamic selection lists
fInspectionDrawingsview.Lists["x_InspectionDrawingDataId"] = {"LinkField":"x_Id","Ajax":true,"AutoFill":false,"DisplayFields":["x_Id","","",""],"ParentFields":[],"FilterFields":[],"Options":[]};
fInspectionDrawingsview.Lists["x_CreatedBy_Id"] = {"LinkField":"x_Id","Ajax":true,"AutoFill":false,"DisplayFields":["x_FirstName","x_LastName","",""],"ParentFields":[],"FilterFields":[],"Options":[]};

// Form object for search
</script>
<script type="text/javascript">

// Write your client script here, no need to add script tags.
</script>
}
@if (ew_Empty(InspectionDrawings.Export)) {
<div class="ewToolbar">
@if (ew_Empty(InspectionDrawings.Export)) {<div style="display: inline-block">
@{
	if (Breadcrumb != null) {
		Breadcrumb.Render();
	}
}
</div>}
	@{ 
		InspectionDrawings_view.ExportOptions.Render("body");
		foreach (var kvp in InspectionDrawings_view.OtherOptions) {
			kvp.Value.Render("body");
		}
	}
@if (ew_Empty(InspectionDrawings.Export)) {
@Html.Raw(Language.SelectionForm())
}
	<div class="clearfix"></div>
</div>
}
@{
	InspectionDrawings_view.ShowPageHeader();
}
@{
	InspectionDrawings_view.ShowMessage();
}
<form name="fInspectionDrawingsview" id="fInspectionDrawingsview" class="form-inline ewForm ewViewForm" method="post">
@if (InspectionDrawings_view.CheckToken) { 
<input type="hidden" name="@EW_TOKEN_NAME" value="@InspectionDrawings_view.Token">
}
<input type="hidden" name="t" value="InspectionDrawings">
<table  class="table table-bordered table-striped ewViewTable">
@if (InspectionDrawings.Id.Visible) { @* InspectionDrawings.Id.Visible (begin) *@
	<tr id="r_Id">
		<td><span id="elh_InspectionDrawings_Id">@Html.Raw(InspectionDrawings.Id.FldCaption)</span></td>
		<td @Html.Raw(InspectionDrawings.Id.CellAttributes)>
<span id="el_InspectionDrawings_Id" class="form-group">
<span @(Html.Raw(InspectionDrawings.Id.ViewAttributes))>
@Html.Raw(InspectionDrawings.Id.ViewValue)</span>
</span>
</td>
	</tr>
} @* InspectionDrawings.Id.Visible (end) *@
@if (InspectionDrawings.zName.Visible) { @* InspectionDrawings.zName.Visible (begin) *@
	<tr id="r_zName">
		<td><span id="elh_InspectionDrawings_zName">@Html.Raw(InspectionDrawings.zName.FldCaption)</span></td>
		<td @Html.Raw(InspectionDrawings.zName.CellAttributes)>
<span id="el_InspectionDrawings_zName" class="form-group">
<span @(Html.Raw(InspectionDrawings.zName.ViewAttributes))>
@Html.Raw(InspectionDrawings.zName.ViewValue)</span>
</span>
</td>
	</tr>
} @* InspectionDrawings.zName.Visible (end) *@
@if (InspectionDrawings.Size.Visible) { @* InspectionDrawings.Size.Visible (begin) *@
	<tr id="r_Size">
		<td><span id="elh_InspectionDrawings_Size">@Html.Raw(InspectionDrawings.Size.FldCaption)</span></td>
		<td @Html.Raw(InspectionDrawings.Size.CellAttributes)>
<span id="el_InspectionDrawings_Size" class="form-group">
<span @(Html.Raw(InspectionDrawings.Size.ViewAttributes))>
@Html.Raw(InspectionDrawings.Size.ViewValue)</span>
</span>
</td>
	</tr>
} @* InspectionDrawings.Size.Visible (end) *@
@if (InspectionDrawings.DateCreated.Visible) { @* InspectionDrawings.DateCreated.Visible (begin) *@
	<tr id="r_DateCreated">
		<td><span id="elh_InspectionDrawings_DateCreated">@Html.Raw(InspectionDrawings.DateCreated.FldCaption)</span></td>
		<td @Html.Raw(InspectionDrawings.DateCreated.CellAttributes)>
<span id="el_InspectionDrawings_DateCreated" class="form-group">
<span @(Html.Raw(InspectionDrawings.DateCreated.ViewAttributes))>
@Html.Raw(InspectionDrawings.DateCreated.ViewValue)</span>
</span>
</td>
	</tr>
} @* InspectionDrawings.DateCreated.Visible (end) *@
@if (InspectionDrawings.InspectionDrawingDataId.Visible) { @* InspectionDrawings.InspectionDrawingDataId.Visible (begin) *@
	<tr id="r_InspectionDrawingDataId">
		<td><span id="elh_InspectionDrawings_InspectionDrawingDataId">@Html.Raw(InspectionDrawings.InspectionDrawingDataId.FldCaption)</span></td>
		<td @Html.Raw(InspectionDrawings.InspectionDrawingDataId.CellAttributes)>
<span id="el_InspectionDrawings_InspectionDrawingDataId" class="form-group">
<span @(Html.Raw(InspectionDrawings.InspectionDrawingDataId.ViewAttributes))>
@Html.Raw(InspectionDrawings.InspectionDrawingDataId.ViewValue)</span>
</span>
</td>
	</tr>
} @* InspectionDrawings.InspectionDrawingDataId.Visible (end) *@
@if (InspectionDrawings.CreatedBy_Id.Visible) { @* InspectionDrawings.CreatedBy_Id.Visible (begin) *@
	<tr id="r_CreatedBy_Id">
		<td><span id="elh_InspectionDrawings_CreatedBy_Id">@Html.Raw(InspectionDrawings.CreatedBy_Id.FldCaption)</span></td>
		<td @Html.Raw(InspectionDrawings.CreatedBy_Id.CellAttributes)>
<span id="el_InspectionDrawings_CreatedBy_Id" class="form-group">
<span @(Html.Raw(InspectionDrawings.CreatedBy_Id.ViewAttributes))>
@Html.Raw(InspectionDrawings.CreatedBy_Id.ViewValue)</span>
</span>
</td>
	</tr>
} @* InspectionDrawings.CreatedBy_Id.Visible (end) *@
</table>
@if (InspectionDrawings_view.Recordset != null) { // Close the main data reader for detail tables // ASPX
	InspectionDrawings_view.Recordset.Close();
	InspectionDrawings_view.Recordset.Dispose();
}
</form>
@if (ew_Empty(InspectionDrawings.Export)) {
<script type="text/javascript">
fInspectionDrawingsview.Init();
</script>
}
@{
	InspectionDrawings_view.ShowPageFooter();
	if (EW_DEBUG_ENABLED) {
		ew_Write(ew_DebugMsg());		
		ew_Write(ew_ElapsedTime(StartTime));		
	}
}
@if (ew_Empty(InspectionDrawings.Export)) {
<script type="text/javascript">

// Write your table-specific startup script here
// document.write("page loaded");

</script>
}
@{
	InspectionDrawings_view.Page_Terminate();
}
