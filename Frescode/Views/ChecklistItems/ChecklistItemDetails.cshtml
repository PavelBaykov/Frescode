@model dynamic

@{
    ViewBag.Title = "Checklist Item Details";
}

@section AdditionalScripts{
    <script type="text/javascript" src="/assets/js/pages/datatables_custom_viewitem.js"></script>

    <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" media="screen">
    <script type="text/javascript" src="/assets/js/plugins/imgNotes/libs/jquery/jquery-ui.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/imgNotes/libs/jquery.fs.zoetrope.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/imgNotes/libs/toe.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/imgNotes/libs/jquery.mousewheel.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/imgNotes/libs/imgViewer.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/imgNotes/libs/printThis.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/imgNotes/dist/imgNotes.min.js"></script>

    <script type="text/javascript" src="/assets/js/plugins/media/fancybox.min.js"></script>
    <script type="text/javascript" src="/assets/js/pages/gallery.js"></script>
    <script>
        userId = @Html.Raw(Json.Encode(ViewBag.UserId));
        checklistItemId = @Html.Raw(Json.Encode(ViewBag.ChecklistItemId));

        function ChecklistItemDescriptionViewModel() {
            var self = this;

            self.Id = ko.observable(-1);
            self.DefectSpotsList = ko.observableArray();
            self.SortDefectSpotsCommand = function() {
                self.DefectSpotsList.sort(function(left, right) {
                    return left.OrderNumber() == right.OrderNumber() ? 0 : (left.OrderNumber() < right.OrderNumber() ? -1 : 1);
                });
            }
            self.CreateDefectSpotCommand = function() {
                var newDefectSpot = new DefectSpotViewModel();
                newDefectSpot.ChecklistItemId(self.Id());
                newDefectSpot.Description("Defect spot description");
                newDefectSpot.AttachedPictures("");
                var defectSpotWithMaxOrderNumber = _.max(self.DefectSpotsList(), function(x) { return x.OrderNumber() });
                if (!defectSpotWithMaxOrderNumber || !defectSpotWithMaxOrderNumber.OrderNumber || defectSpotWithMaxOrderNumber < 0)
                    defectSpotWithMaxOrderNumber = 0;
                else
                    defectSpotWithMaxOrderNumber = defectSpotWithMaxOrderNumber.OrderNumber();
                newDefectSpot.OrderNumber(defectSpotWithMaxOrderNumber + 1);
                self.DefectSpotsList.push(newDefectSpot);
                newDefectSpot.SaveDefectSpotCommand();
                initGallery();
                //TODO move to function
                $(".viewport").css("top", $("#image").offset().top + 50 + "px");
                return newDefectSpot;
            }
            self.Description = ko.observable();
            self.ChecklistName = ko.observable();
            self.ProjectName = ko.observable();
            self.InspectionDrawingPath = ko.observable();
            self.AddDefectSpotPath = ko.observable("/ChecklistItems/DefectSpotAddition?userId=" + userId + "&checklistItemId=" + self.Id());
            
            self.DeleteDefectSpotCommand = function(defectSpot) {
                var getDeleteOpt = function() {
                    return {
                        url: '/ChecklistItems/DeleteDefectSpot?defectSpotId=' + defectSpot.Id(),
                        type: 'get'
                    }
                }
                $.ajaxq('item_' + defectSpot.InternalGuid(), getDeleteOpt);
                var divToRemove = _.filter($(".viewport").find("div"), function(div) { return $(div).data("ViewModel") === defectSpot; })[0];
                $(divToRemove).remove();
                self.DefectSpotsList.remove(defectSpot);
                $(".viewport").css("top", $("#image").offset().top + 50 + "px");
            };
        }

        var internalMaxGuid = 1;
        function DefectSpotViewModel() {
            var self = this;

            self.Id = ko.observable(-1);
            self.InternalGuid = ko.observable(++internalMaxGuid);
            self.ChecklistItemId = ko.observable();
            self.OrderNumber = ko.observable();
            self.Description = ko.observable();
            self.AttachedPictures = ko.observableArray();
            self.X = ko.observable();
            self.Y = ko.observable();
            self.EditDefectSpotCommand = function() {
                if (self.Id() < 0) return;
                window.location.href = "DefectSpot/" + self.Id() + "/";
            };
            
            var getCreateOpt = function() {
                var dto = {
                    OrderNumber: self.OrderNumber(),
                    X: self.X(),
                    Y: self.Y(),
                    Description: self.Description(),
                    ChecklistItemId: self.ChecklistItemId(),
                    Id: self.Id()
                }

                return {
                    url: '/ChecklistItems/AddDefectSpot',
                    type: 'post',
                    success: function(data) {
                        self.Id(data.Id);
                    },
                    data: dto
                };
            }

            self.SaveDefectSpotCommand = function() {
                $.ajaxq('item_' + self.InternalGuid(), getCreateOpt);
            }
        }

        function getChecklistItemDetails(callback) {
            $.getJSON('/ChecklistItems/GetChecklistitemDetails?userId=' + userId + '&checklistItemId=' + checklistItemId)
                .error(function(e) {
                    if (e.status == 500 || e.status == 400) {
                        var message = 'Error ' + e.status + '\r\n' +
                            'Response: ' + e.responseText;
                        console.log(message);
                        alert(message);
                    }
                })
                .done(function(data) {
                    if ($.isFunction(callback)) {
                        callback(data);
                    }
                });
        }

        rootViewModel.MainViewModel(new ChecklistItemDescriptionViewModel());
        var mainViewModel = rootViewModel.MainViewModel();

        function fillViewModel(checklistDetails) {
            $(document).ready(function() {
                mainViewModel.DefectSpotsList.removeAll();
                mainViewModel.Id(checklistDetails.Id);
                mainViewModel.Description(checklistDetails.Description);
                mainViewModel.ChecklistName(checklistDetails.ChecklistName);
                mainViewModel.ProjectName(checklistDetails.ProjectName);
                mainViewModel.InspectionDrawingPath(checklistDetails.InspectionDrawingPath);
                _.each(checklistDetails.DefectSpotsList, function(defectSpot) {
                    var defectSpotViewModel = new DefectSpotViewModel();
                    defectSpotViewModel.Id(defectSpot.Id);
                    defectSpotViewModel.ChecklistItemId(checklistDetails.Id);
                    defectSpotViewModel.OrderNumber(defectSpot.OrderNumber);
                    defectSpotViewModel.Description(defectSpot.Description);
                    _.each(defectSpot.AttachedPictures, function(picturePath) {
                        defectSpotViewModel.AttachedPictures.push(picturePath);
                    });
                    defectSpotViewModel.X(defectSpot.X);
                    defectSpotViewModel.Y(defectSpot.Y);
                    mainViewModel.DefectSpotsList.push(defectSpotViewModel);
                });
                initDataTables();
            });
        }

        getChecklistItemDetails(function(checklistDetails) {
            fillViewModel(checklistDetails);
            initFancyBox(window, document, jQuery);
            initGallery();
            initInspectionDrawing();
        });

        function initInspectionDrawing() {
            var markersInited = false;

            var $img = $("#image").imgNotes({
                onEdit: function(ev, elem) {
                    var $elem = $(elem);

                    $('#NoteDialog').remove();
                    return $('<div id="NoteDialog"></div>').dialog({
                        title: "Note Editor",
                        resizable: false,
                        modal: true,
                        height: "300",
                        width: "450",
                        position: { my: "left bottom", at: "right top", of: elem },
                        buttons: {
                            "Save": function() {
                                var txt = $('textarea', this).val();
                                var viewModel = $elem.data("ViewModel");
                                viewModel.Description(txt);
                                viewModel.SaveDefectSpotCommand();
                                $(this).dialog("close");
                            },
                            "Delete": function() {
                                mainViewModel.DefectSpotsList.remove($elem.data("ViewModel"));
                                $elem.trigger("remove");
                                $(this).dialog("close");
                            },

                            "Cancel": function() {
                                $(this).dialog("close");
                            }
                        },
                        open: function(event, ui) {
                            $(this).css("overflow", "hidden");
                            var textarea = $('<textarea id="txt" style="height:100%; width:100%;">');
                            textarea.val($elem.data("ViewModel").Description());
                            $(this).html(textarea);
                        },
                        close: function(event, ui) {
                        }
                    });
                },
                onUpdateMarker: function(elem) {

                    var $elem = $(elem);
                    var $img = $(this.img);

                    var pos = $img.imgViewer("imgToView", $elem.data("relx"), $elem.data("rely"));
                    var viewModel;
                    viewModel = $elem.data("ViewModel");
                    if (viewModel && markersInited) {
                        if (viewModel.X() !== $elem.data("relx") || viewModel.Y() !== $elem.data("rely")) {
                            viewModel.X($elem.data("relx"));
                            viewModel.Y($elem.data("rely"));
                            viewModel.SaveDefectSpotCommand();
                        }
                    }
                    if (!viewModel) {
                        viewModel = _.find(mainViewModel.DefectSpotsList(), function(spot) {
                            return spot.X() == $elem.data("relx") && spot.Y() == $elem.data("rely");
                        });
                        $elem.data("ViewModel", viewModel);
                    }
                    

                    $(elem).find(".noteCount").html(viewModel.OrderNumber());

                    var zoom = $img.imgViewer("option", "zoom");
                    if (pos) {
                        $elem.css({
                            left: (pos.x - $elem.data("xOffset")),
                            top: (pos.y - $elem.data("yOffset")),
                            position: "absolute",
                            transform: "scale(" + zoom + "," + zoom + ")"
                        });
                    }
                },
                onAdd: function() {
                    this.options.vAll = "bottom";
                    this.options.hAll = "middle";
                    var elem = $(document.createElement('div'))
                        .css({ width: '27px', height: '40px', 'text-align': 'center', color: '#fff', 'font-weight': 'bold', 'font-size': '14px' })
                        .prepend($('<img>', { src: '/assets/css/icons/marker_black.png', width: '27px', height: '40px' }).css({ position: 'absolute', top: '-2px', left: '0px' }));
                    elem.append($('<p class="noteCount"></p>').css({ 'z-index': 1, position: 'relative', top: '0' }));

                    if (markersInited) {
                        var viewModel = mainViewModel.CreateDefectSpotCommand();
                        mainViewModel.SortDefectSpotsCommand();
                        elem.data("ViewModel", viewModel);
                    }

                    return elem;
                }
            });

            var markers = _.map(mainViewModel.DefectSpotsList(),
                function(defectSpot) {
                    return {
                        x: defectSpot.X(),
                        y: defectSpot.Y(),
                        note: defectSpot.Description(),
                    }
                });
            $img.imgNotes("import", _.filter(markers, function(m) { return m.x !== 0 && m.y !== 0 }));
            markersInited = true;

            var $toggle = $("#toggleEdit");
            $toggle.css("margin", "10px");
            if ($img.imgNotes("option", "canEdit")) {
                $toggle.text("View");
            } else {
                $toggle.text("Edit");
            }
            $toggle.on("click", function() {
                var $this = $(this);
                if ($this.text() == "Edit") {
                    $this.text("View");
                    $img.imgNotes("option", "canEdit", true);
                } else {
                    $this.text('Edit');
                    $img.imgNotes('option', 'canEdit', false);
                }
            });


            var $viewport = $(".viewport");
            $('#accordeon').on('show.bs.collapse', function(e) {
                $viewport.hide();
            });
            $('#accordeon').on('shown.bs.collapse', function(e) {
                //TODO move to function
                $(".viewport").css("top", $("#image").offset().top + 50 + "px")
                $viewport.show();
            })
            $('#accordeon').on('hide.bs.collapse', function(e) {
                $viewport.hide();
            })
            $('#accordeon').on('hidden.bs.collapse', function(e) {
                //TODO move to function
                $(".viewport").css("top", $("#image").offset().top + 50 + "px")
                $viewport.show();
            })
        }
    </script>
}

@section Header
{
    @Html.Partial("_Breadcrumb")
}

<div id="main_content" class="page-content">
    <!-- Main content -->
    <div class="content-wrapper">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-lg-4 col-md-5 col-sm-5 col-xs-10">
                        <h4 class="panel-title"><i class="icon-clipboard2"></i><span data-bind="text: ChecklistName() + ' items'"></span></h4>
                    </div>
                </div>
            </div>
            <div class="panel-body">

                <div class="row">
                    <div class="col-md-2 col-sm-2">
                        <span class="mobileBold">Description:</span>
                    </div>
                    <div class="col-md-10 col-sm-10" data-bind="html: Description">
                        
                    </div>
                </div>
                <br>
                <div class="row">
                    <div class="col-md-2 col-sm-2">
                        <span class="mobileBold">Defect spot list:</span>
                    </div>
                    <div class="col-md-10 col-sm-10">
                        <div id="accordeon" class="panel-group panel-group-control panel-group-control-right content-group-lg">

                            <!-- ko foreach: DefectSpotsList -->
                            <div class="panel panel-white" data-bind="style: { opacity: Id() < 0 ? 0.5 : 1 }">
                                <div class="panel-heading collapsed" data-toggle="collapse" data-bind="attr: { href: '#collapsible-control-right-group' + $index()}">
                                    <div class="row">
                                        <div data-bind="html: OrderNumber" class="col-lg-1 col-md-1 col-sm-1 col-xs-1"></div>
                                        <div class="col-lg-11 col-md-11 col-sm-11 col-xs-11">
                                            <div class="panel-title">
                                                <a class="collapsed" data-toggle="collapse" data-bind="text: Description, attr: { href: '#collapsible-control-right-group' + $index()}"></a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div data-bind="attr: { id: 'collapsible-control-right-group' + $index() }" class="panel-collapse collapse">
                                    <div class="panel-body">
                                        <div class="row">
                                            <!-- ko foreach: AttachedPictures -->
                                            <div class="col-lg-2 col-sm-3 col-xs-4">
                                                <div class="thumbnail">
                                                    <div class="thumb">
                                                        <span>
                                                            <a data-bind="attr: { href: $data, rel: 'gallery' + $parent.OrderNumber(), 'data-popup' : 'lightbox' }" class="btn border-white text-white btn-flat btn-icon btn-rounded fancybox.image" style="padding: 0px">
                                                                <img data-bind="attr: { src: $data }" alt="">
                                                            </a>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- /ko -->
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                                <button type="button" class="btn  btn-success btn-labeled " style="margin:3px" data-bind="click: EditDefectSpotCommand">
                                                    <b><i class="icon-pencil7"></i></b> Edit defect spot
                                                </button>
                                                <button type="button" class="btn  btn-success btn-labeled " style="margin:3px" data-toggle="modal" data-target="#modal_default" data-bind="click: $parent.DeleteDefectSpotCommand">
                                                    <b><i class="icon-bin"></i></b> Delete defect spot
                                                </button>
                                            </div>
                                        </div>	
                                    </div>
                                </div>
                            </div>
                            <!-- /ko -->

                        </div>
                        <p>
                            <button data-bind="click: CreateDefectSpotCommand" type="button" class="btn  btn-success btn-labeled btn-xlg">
                                <b><i class="icon-stack-plus"></i></b>
                                Add defect spot
                            </button>
                        </p>
                    </div>
                </div>
                <br>

                <div class="row" data-bind="if: InspectionDrawingPath() != ''">
                    <div class="col-md-2 col-sm-2">
                        <span class="mobileBold">Inspection drawing:</span>
                    </div>
                    <div class="col-lg-10 col-sm-10">
                        <div class="thumbnail">
                            <div class="thumb">
                                <div id="imgdiv" style="text-align: center;">
                                    <img id="image" data-bind="
                                     attr: {
                                        src: InspectionDrawingPath
                                     }
                                     " style="border: 30px solid #ccc; padding:20px;" width="80%" />
                                    <br />
                                    <button id="toggleEdit">Edit</button>	<!--<button id="export">Export</button> <button id="clear">Clear</button> <button id="print">Print</button>-->
                                </div>
                                <div id=txt></div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>