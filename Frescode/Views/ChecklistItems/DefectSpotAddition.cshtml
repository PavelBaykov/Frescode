@model dynamic

@{
    ViewBag.Title = "Defect Spot Details";
}

@section Header
{
    @Html.Partial("_Breadcrumb")
}

@section AdditionalScripts{
    <script type="text/javascript" src="/assets/js/pages/datatables_custom_items.js"></script>

    <link rel="stylesheet" href="/assets/add/css/style.css">
    <!-- blueimp Gallery styles -->
    <link rel="stylesheet" href="http://blueimp.github.io/Gallery/css/blueimp-gallery.min.css">
    <!-- CSS to style the file input field as button and adjust the Bootstrap progress bars -->
    <link rel="stylesheet" href="/assets/add/css/jquery.fileupload.css">
    <link rel="stylesheet" href="/assets/add/css/jquery.fileupload-ui.css">
    <!-- CSS adjustments for browsers with JavaScript disabled -->
    <noscript><link rel="stylesheet" href="/assets/add/css/jquery.fileupload-noscript.css"></noscript>
    <noscript><link rel="stylesheet" href="/assets/add/css/jquery.fileupload-ui-noscript.css"></noscript>

    <script>
        ko.bindingHandlers.bootstrapSwitchOn = {
            init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
                $elem = $(element);
                $(element).bootstrapSwitch();
                $(element).bootstrapSwitch('state', ko.utils.unwrapObservable(valueAccessor())); // Set intial state
                $(element).on('switchChange.bootstrapSwitch', function(event, state) {
                    valueAccessor()(state);
                });
            },
            update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
                var vStatus = $(element).bootstrapSwitch('state');
                var vmStatus = ko.utils.unwrapObservable(valueAccessor());
                if (vStatus != vmStatus) {
                    $(element).bootstrapSwitch('state', vmStatus);
                }
            }
        };

        userId = @Html.Raw(Json.Encode(ViewBag.UserId));
        defectSpotId = @Html.Raw(Json.Encode(ViewBag.DefectSpotId));

        //View model of defect spot
        function AddSpotViewModel() {
            var self = this;

            //Defect spot Id
            self.Id = ko.observable();
            self.OrderNumber = ko.observable("");
            self.Description = ko.observable();
            self.SaveDescriptionCommand = function() {
                $.ajaxq("checklist_item_description_saving",
                {
                    url: '/ChecklistItems/SaveChecklistItemDescription',
                    type: 'post',
                    data: {
                        Id: self.Id(),
                        Description: self.Description()
                    }
                });
            }
            self.AttachedPictures = ko.observableArray();
        }

        function PictureViewModel() {
            var self = this;

            self.Path = ko.observable();
            self.Timestamp = ko.observable();
        }

        function getAddSpotViewModel(callback) {
            $.getJSON('/ChecklistItems/GetDefectSpot?userId=' + userId + '&defectSpotId=' + defectSpotId)
                .error(function(e) {
                    if (e.status === 500 || e.status === 400) {
                        var message = 'Error ' + e.status + '\r\n' +
                            'Response: ' + e.responseText;
                        console.log(message);
                        alert(message);
                    }
                })
                .done(function(data) {
                    if ($.isFunction(callback)) {
                        callback(data);
                    }
                });
        }

        rootViewModel.MainViewModel(new AddSpotViewModel());
        var mainViewModel = rootViewModel.MainViewModel();

        function fillViewModel(defectSpot) {
            $(document).ready(function() {
                mainViewModel.Id(defectSpot.Id);
                mainViewModel.OrderNumber(defectSpot.OrderNumber);
                mainViewModel.Description(defectSpot.Description);
                _.each(defectSpot.AttachedPictures, function(picture) {
                    var pictureViewModel = new PictureViewModel();
                    pictureViewModel.Path(picture.Path);
                    pictureViewModel.Timestamp(picture.Timestamp);
                    mainViewModel.AttachedPictures.push(pictureViewModel);
                });
            });
        }

        getAddSpotViewModel(function(defectSpot) {
            fillViewModel(defectSpot);
        });
    </script>
}

<div id="main_content" class="page-content">
    <!-- Main content -->
    <div class="content-wrapper">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title"><i class=" icon-wrench"></i><span data-bind="text: 'Defect Spot #' + OrderNumber()"></span></h4>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-2 col-sm-2">
                        <span class="mobileBold">Description:</span>
                    </div>
                    <div class="col-md-10 col-sm-10">
                        <div class="form-group">
                            <textarea data-bind="textInput: Description" rows="5" cols="5" class="form-control" placeholder="Enter description of defect spot"></textarea>
                        </div>
                    </div>
                </div>
                <!--Загрузка фотографий-->
                <div id="blueimp-gallery" class="blueimp-gallery blueimp-gallery-controls" data-filter=":even">
                    <div class="slides"></div>
                    <h3 class="title"></h3>
                    <a class="prev">‹</a>
                    <a class="next">›</a>
                    <a class="close">×</a>
                    <a class="play-pause"></a>
                    <ol class="indicator"></ol>
                </div>
                <!-- The template to display files available for upload -->
                <script id="template-upload" type="text/x-tmpl">
                    
                    {% for (var i=0, file; file=o.files[i]; i++) { %}
                    <tr class="template-upload fade">
                        <td>
                            <span class="preview"></span>
                        </td>
                        <td>
                            <p class="name">{%=file.name%}</p>
                            <strong class="error text-danger"></strong>
                        </td>
                        <td>
                            <p class="size">Processing...</p>
                            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
                        </td>
                        <td>
                            {% if (!i && !o.options.autoUpload) { %}
                            <button class="btn btn-primary start" disabled>
                                <i class="glyphicon glyphicon-upload"></i>
                                <span>Start</span>
                            </button>
                            {% } %}
                            {% if (!i) { %}
                            <button class="btn btn-warning cancel">
                                <i class="glyphicon glyphicon-ban-circle"></i>
                                <span>Cancel</span>
                            </button>
                            {% } %}
                        </td>
                    </tr>
                    {% } %}
                
                </script>
                <!-- The template to display files available for download -->
                <script id="template-download" type="text/x-tmpl">
                    {% for (var i=0, file; file=o.files[i]; i++) { %}
                    <tr class="template-download fade">
                        <td>
                            <span class="preview">
                                {% if (file.ThumbnailUrl) { %}
                                <a href="{%=file.Url%}" title="{%=file.Name%}" download="{%=file.Name%}" data-gallery><img src="{%=file.ThumbnailUrl%}"></a>
                                {% } %}
                            </span>
                        </td>
                        <td>
                            <p class="name">
                                {% if (file.Url) { %}
                                <a href="{%=file.Url%}" title="{%=file.Name%}" download="{%=file.Name%}" {%=file.ThumbnailUrl?'data-gallery':''%}>{%=file.Name%}</a>
                                {% } else { %}
                                <span>{%=file.Name%}</span>
                                {% } %}
                            </p>
                            {% if (file.Error) { %}
                            <div><span class="label label-danger">Error</span> {%=file.Error%}</div>
                            {% } %}
                        </td>
                        <td>
                            <span class="size">{%=o.formatFileSize(file.Size)%}</span>
                        </td>
                        <td>
                            {% if (file.DeleteUrl) { %}
                            <button class="btn btn-danger delete" data-type="{%=file.DeleteType%}" data-url="{%=file.DeleteUrl%}" >
                                <i class="glyphicon glyphicon-trash"></i>
                                <span>Delete</span>
                            </button>
                            <input style="margin-left: 15px" type="checkbox" name="delete" value="1" class="toggle">
                            {% } else { %}
                            <button class="btn btn-warning cancel">
                                <i class="glyphicon glyphicon-ban-circle"></i>
                                <span>Cancel</span>
                            </button>
                            {% } %}
                        </td>
                    </tr>
                    {% } %}
                </script>
                <!--/Загрузка фотографий-->

                <form id="fileupload" action="UploadFiles" method="POST" enctype="multipart/form-data">

                    <!-- The table listing the files available for upload/download -->
                    <table role="presentation" class="table table-striped"><tbody class="files"></tbody></table>

                    <!-- The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload -->
                    <div class="row fileupload-buttonbar">
                        <div class="col-lg-12">
                            <!-- The fileinput-button span is used to style the file input field as button -->
                            <span class="btn btn-success fileinput-button btn-labeled btn-xlg">
                                <b><i class="glyphicon glyphicon-plus"></i></b>Add defect spot picture
                                <input type="file" name="files[]" multiple>
                            </span>
                            <button type="button" class="btn btn-success btn-labeled btn-xlg start">
                                <b><i class="glyphicon glyphicon-upload"></i></b> Start upload
                            </button>
                            <button type="button" class="btn btn-success btn-labeled btn-xlg" data-bind="click: SaveDescriptionCommand">
                                <b><i class="icon-floppy-disk"></i></b> Save description
                            </button>
                            <button type="button" class="btn btn-danger btn-labeled btn-xlg delete">
                                <b><i class="icon-bin"></i></b> Delete selected pictures
                            </button>
                            <!-- The global file processing state -->
                            <span class="fileupload-process"></span>
                        </div>
                        <!-- The global progress state -->
                        <div class="col-lg-5 fileupload-progress fade">
                            <!-- The global progress bar -->
                            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar progress-bar-success" style="width: 0%;"></div>
                            </div>
                            <!-- The extended global progress state -->
                            <div class="progress-extended">&nbsp;</div>
                        </div>
                    </div>
                </form>
            </div>

        </div>
        <!-- /Main content -->
    </div>
</div>
<script type="text/javascript">
		/*Удаление фото*/
        removePicture = function(el) {
            $(el).parents(".remove").remove();
        };

		/*Добавление фото*/
        addPicture = function(el) {
			$('<div class="col-lg-2 col-md-3 col-xs-12 remove">'+
								'<div class="thumbnail">'+
									'<div class="thumb">'+
										'<img src="assets/images/placeholder.jpg" alt="">'+
										'<div class="caption-overflow">'+
											'<span>'+
												'<a href="assets/images/placeholder.jpg" data-popup="lightbox" rel="gallery" class="btn bg-success-300 btn-xs btn-icon"><i class="icon-zoomin3"></i></a>'+
												'<a onclick="removePicture(this)" class="btn bg-success-300 btn-xs btn-icon"><i class="icon-folder-remove"></i></a>'+
											'</span>'+
										'</div>'+
									'</div>'+
									'<div class="caption text-center">'+
										 '01.06.1989'+
									'</div>'+
								'</div>'+
							'</div>').insertBefore($(el).parents(".remove"));
		};


</script>
<script src="/assets/add/js/vendor/jquery.ui.widget.js"></script>
<!-- The Templates plugin is included to render the upload/download listings -->
<script src="http://blueimp.github.io/JavaScript-Templates/js/tmpl.min.js"></script>
<!-- The Load Image plugin is included for the preview images and image resizing functionality -->
<script src="http://blueimp.github.io/JavaScript-Load-Image/js/load-image.all.min.js"></script>
<!-- The Canvas to Blob plugin is included for image resizing functionality -->
<script src="http://blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>
<!-- Bootstrap JS is not required, but included for the responsive demo navigation -->
<script src="http://netdna.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<!-- blueimp Gallery script -->
<script src="http://blueimp.github.io/Gallery/js/jquery.blueimp-gallery.min.js"></script>
<!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
<script src="/assets/add/js/jquery.iframe-transport.js"></script>
<!-- The basic File Upload plugin -->
<script src="/assets/add/js/jquery.fileupload.js"></script>
<!-- The File Upload processing plugin -->
<script src="/assets/add/js/jquery.fileupload-process.js"></script>
<!-- The File Upload image preview & resize plugin -->
<script src="/assets/add/js/jquery.fileupload-image.js"></script>
<!-- The File Upload user interface plugin -->
<script src="/assets/add/js/jquery.fileupload-ui.js"></script>
<!-- The main application script -->
<script src="/assets/add/js/main.js"></script>
<!-- The XDomainRequest Transport is included for cross-domain file deletion for IE 8 and IE 9 -->
<!--[if (gte IE 8)&(lt IE 10)]>
<script src="/js/cors/jquery.xdr-transport.js"></script>
<![endif]-->
